{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"curry","text":"<p>Wrap dask scheduler to make it easy to buid datascience flow</p>"},{"location":"modules/","title":"Modules","text":""},{"location":"modules/#curry.block","title":"curry.block","text":""},{"location":"modules/#curry.block.Block","title":"Block","text":"<p>               Bases: <code>BaseModel</code></p> <p>A block is a unit of computation in a workflow. It can be connected to other blocks and produce outputs in different formats using producers.</p> ATTRIBUTE DESCRIPTION <code>id</code> <p>The unique identifier of the block.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The name of the block.</p> <p> TYPE: <code>str</code> </p> <code>description</code> <p>The description of the block.</p> <p> TYPE: <code>str</code> </p> <code>method_id</code> <p>The method ID associated with the block.</p> <p> TYPE: <code>str</code> </p> <code>parameters</code> <p>The parameters of the block.</p> <p> TYPE: <code>AnyDict</code> </p> <code>connections</code> <p>The connections of the block.</p> <p> TYPE: <code>list[BlockConnection]</code> </p> <code>producers</code> <p>The producers of the block</p> <p> TYPE: <code>dict[str, BlockProducer]</code> </p>"},{"location":"modules/#curry.block.Block.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(strict=True, extra='forbid')\n</code></pre>"},{"location":"modules/#curry.block.Block.id","title":"id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>id = Field(default_factory=lambda: str(uuid4()))\n</code></pre>"},{"location":"modules/#curry.block.Block.method_id","title":"method_id  <code>instance-attribute</code>","text":"<pre><code>method_id\n</code></pre>"},{"location":"modules/#curry.block.Block.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name = None\n</code></pre>"},{"location":"modules/#curry.block.Block.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"modules/#curry.block.Block.parameters","title":"parameters  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>parameters = {}\n</code></pre>"},{"location":"modules/#curry.block.Block.connections","title":"connections  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>connections = []\n</code></pre>"},{"location":"modules/#curry.block.Block.producers","title":"producers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>producers = {'html': BlockProducer(format_name='html', func=block_as_html_default), 'python_source': BlockProducer(format_name='python_source', description='Get the source code of the producer python function', func=block_method_source_code_default)}\n</code></pre>"},{"location":"modules/#curry.block.Block.has_producer","title":"has_producer","text":"<pre><code>has_producer(format_name)\n</code></pre> <p>Check if the block has a producer for the given format name.</p> PARAMETER DESCRIPTION <code>format_name</code> <p> TYPE: <code>str</code> </p> PARAMETER DESCRIPTION <code>format_name</code> <p>The name of the format to check.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>True if the block has a producer for the given format name, False otherwise.</p> <p> TYPE: <code>bool</code> </p> Source code in <code>curry/block/models.py</code> <pre><code>def has_producer(self, format_name: str) -&gt; bool:\n    \"\"\"\n    Check if the block has a producer for the given format name.\n\n    Parameters:\n        format_name (str): The name of the format to check.\n\n    Returns:\n        bool: True if the block has a producer for the given format name, False otherwise.\n    \"\"\"\n    return format_name in self.producers\n</code></pre>"},{"location":"modules/#curry.block.Block.produce","title":"produce","text":"<pre><code>produce(format_name)\n</code></pre> PARAMETER DESCRIPTION <code>format_name</code> <p> TYPE: <code>str</code> </p> Source code in <code>curry/block/models.py</code> <pre><code>def produce(self, format_name: str) -&gt; typing.Any:\n    return self.producers[format_name].func(self)\n</code></pre>"},{"location":"modules/#curry.block.Block.available_producers","title":"available_producers","text":"<pre><code>available_producers()\n</code></pre> <p>Returns a list of available producers.</p> RETURNS DESCRIPTION <code>list[str]</code> <p>list[str]: A list of available producers.</p> Source code in <code>curry/block/models.py</code> <pre><code>def available_producers(self) -&gt; list[str]:\n    \"\"\"\n    Returns a list of available producers.\n\n    Returns:\n        list[str]: A list of available producers.\n    \"\"\"\n    return list(self.producers.keys())\n</code></pre>"},{"location":"modules/#curry.block.Block.register_producer","title":"register_producer","text":"<pre><code>register_producer(producer)\n</code></pre> PARAMETER DESCRIPTION <code>producer</code> <p> TYPE: <code>BlockProducer</code> </p> Source code in <code>curry/block/models.py</code> <pre><code>def register_producer(self, producer: BlockProducer) -&gt; None:\n    # if producer.format_name in self.producers:\n    #     raise ProducerAlreadyRegistered(producer.format_name)\n    self.producers[producer.format_name] = producer\n</code></pre>"},{"location":"modules/#curry.block.Block.from_func","title":"from_func  <code>classmethod</code>","text":"<pre><code>from_func(func, **kwargs)\n</code></pre> <p>Create a Block instance from a given function.</p> PARAMETER DESCRIPTION <code>func</code> <p> TYPE: <code>AnyCallable</code> </p> <code>**kwargs</code> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> PARAMETER DESCRIPTION <code>cls</code> <p>The class of the Block instance.</p> <p> TYPE: <code>type</code> </p> <code>func</code> <p>The function to create the Block from.</p> <p> TYPE: <code>AnyCallable</code> </p> <code>**kwargs</code> <p>Additional keyword arguments for the Block instance.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>Block</code> <p>The created Block instance.</p> <p> TYPE: <code>Block</code> </p> Source code in <code>curry/block/models.py</code> <pre><code>@classmethod\ndef from_func(cls, func: AnyCallable, **kwargs: typing.Any) -&gt; \"Block\":\n    \"\"\"\n    Create a Block instance from a given function.\n\n    Args:\n        cls (type): The class of the Block instance.\n        func (AnyCallable): The function to create the Block from.\n        **kwargs (typing.Any): Additional keyword arguments for the Block instance.\n\n    Returns:\n        Block: The created Block instance.\n\n    \"\"\"\n\n    block_name = kwargs.get(\"name\") or func.__name__\n    kwargs[\"name\"] = block_name\n\n    block_description = kwargs.get(\"description\") or func.__doc__ or \"\"\n    kwargs[\"description\"] = block_description\n\n    block_method_id = kwargs.get(\"method_id\") or func.__name__\n    kwargs[\"method_id\"] = block_method_id\n\n    block = cls(**kwargs)\n\n    return block\n</code></pre>"},{"location":"modules/#curry.block.BlockConnection","title":"BlockConnection","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"modules/#curry.block.BlockConnection.source_block_id","title":"source_block_id  <code>instance-attribute</code>","text":"<pre><code>source_block_id\n</code></pre>"},{"location":"modules/#curry.block.BlockConnection.source_output_name","title":"source_output_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>source_output_name = 'output'\n</code></pre>"},{"location":"modules/#curry.block.BlockConnection.self_input_name","title":"self_input_name  <code>instance-attribute</code>","text":"<pre><code>self_input_name\n</code></pre>"},{"location":"modules/#curry.block.BlockProducer","title":"BlockProducer","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"modules/#curry.block.BlockProducer.format_name","title":"format_name  <code>instance-attribute</code>","text":"<pre><code>format_name\n</code></pre>"},{"location":"modules/#curry.block.BlockProducer.func","title":"func  <code>instance-attribute</code>","text":"<pre><code>func\n</code></pre>"},{"location":"modules/#curry.block.BlockProducer.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"modules/#curry.block.BlockProducer.tags","title":"tags  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tags = []\n</code></pre>"},{"location":"modules/#curry.block.BlockProducer.title","title":"title  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>title = None\n</code></pre>"},{"location":"modules/#curry.block.BlockProducer.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(arbitrary_types_allowed=True)\n</code></pre>"},{"location":"modules/#curry.flow","title":"curry.flow","text":""},{"location":"modules/#curry.flow.submit_workflow","title":"submit_workflow","text":"<pre><code>submit_workflow(blocks, execute=True, render=False, render_format='png', render_filename=None)\n</code></pre> PARAMETER DESCRIPTION <code>blocks</code> <p> TYPE: <code>list[Block]</code> </p> <code>execute</code> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>render</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>render_format</code> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>'png'</code> </p> <code>render_filename</code> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> Source code in <code>curry/flow/workflow.py</code> <pre><code>def submit_workflow(\n    blocks: list[Block],\n    execute: bool = True,\n    render: bool = False,\n    render_format: typing.Optional[str] = \"png\",\n    render_filename: typing.Optional[str] = None,\n) -&gt; AnyDict:\n    task_dict: dict[str, Delayed] = {}\n\n    # Iterate through the blocks of the workflow\n    for block in blocks:\n        block_id = block.id\n        block_method_id = block.method_id or \"no_method\"\n\n        print(\"\\t- Processing block\", block_id, \"with method\", block_method_id)\n\n        # Retrieve the function corresponding to the block type\n        block_method_info = MethodManager.get_method_info(block_method_id)\n        block_method = block_method_info.method\n\n        # Merge block parameters with block connections\n        block_parameters = {}\n        if len(block.connections) &gt; 0 or len(block.parameters) &gt; 0:\n            block_parameters: AnyDict = {\n                **block.parameters,\n                **{\n                    connection.self_input_name: task_dict[connection.source_block_id]\n                    for connection in block.connections\n                },\n            }\n            print(\"Block parameters for block\", block_id, \":\", block_parameters)\n\n        # Create the Dask task for the block\n        task_dict[block_id] = delayed(block_method)(**block_parameters)\n\n    # Retrieve the final block\n    final_task: Delayed = task_dict[list(task_dict.keys())[-1]]\n\n    # Execute the Dask workflow\n    result: typing.Optional[typing.Any] = None  # type: ignore  # noqa: PGH003\n    if execute:\n        # result = final_task.compute()\n        result = final_task.compute()  # type: ignore  # noqa: PGH003\n\n    render_result: typing.Any = None\n    if render:\n        render_result = final_task.visualize(format=render_format, filename=render_filename)  # type: ignore  # noqa: PGH003\n\n    return {\n        \"result\": result,\n        \"render_result\": render_result,\n    }\n</code></pre>"},{"location":"modules/#curry.schedulers.dask","title":"curry.schedulers.dask","text":""},{"location":"modules/#curry.schedulers.dask.slurm_cluster","title":"slurm_cluster  <code>module-attribute</code>","text":"<pre><code>slurm_cluster = SLURMCluster()\n</code></pre>"},{"location":"modules/#curry.server","title":"curry.server","text":""},{"location":"modules/#curry.server.app","title":"app  <code>module-attribute</code>","text":"<pre><code>app = FastAPI()\n</code></pre>"}]}